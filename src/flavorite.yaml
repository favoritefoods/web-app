openapi: 3.0.3
info:
  description: 'This is a Flavorite Server based on the OpenAPI 3.0 specification. '
  title: Flavorite - OpenAPI 3.0
  version: 1.0.1
servers:
  - url: https://localhost:8080/api/v1
tags:
  - description: User's post of reviews for restaurants that serve one or more of their
      favorite dishes
    name: reviews
  - description: All restaurants that have reviews from users
    name: restaurants
  - description: Operations about users
    name: users
paths:
  /reviews:
    post:
      description: Add a new review about a restaurant
      operationId: addReview
      requestBody:
        $ref: '#/components/requestBodies/CreateReview'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: Successful operation
        '405':
          description: Invalid input
      summary: Add a new review about a restaurant
      tags:
        - reviews
  /reviews/{reviewId}:
    delete:
      description: delete a review
      operationId: deleteReview
      parameters:
        - description: Review id to delete
          explode: false
          in: path
          name: reviewId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid review value
      summary: Deletes a review
      tags:
        - reviews
    get:
      description: Returns a single review
      operationId: getReviewById
      parameters:
        - description: ID of review to return
          explode: false
          in: path
          name: reviewId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
      summary: Find review by ID
      tags:
        - reviews
    put:
      description: Update an existing review by Id
      operationId: updateReviewbyId
      parameters:
        - description: ID of review to return
          explode: false
          in: path
          name: reviewId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateReview'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
        '405':
          description: Validation exception
      summary: Update an existing review
      tags:
        - reviews
  /reviews/{reviewId}/image:
    delete:
      description: ''
      operationId: deleteImage
      parameters:
        - description: ID of review to update
          explode: false
          in: path
          name: reviewId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Review or image not found
      summary: deletes an image
      tags:
        - reviews
    post:
      description: ''
      operationId: uploadImage
      parameters:
        - description: ID of review to update
          explode: false
          in: path
          name: reviewId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
        - description: Additional Metadata
          explode: true
          in: query
          name: additionalMetadata
          required: false
          schema:
            type: string
          style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      summary: uploads an image
      tags:
        - reviews
  /restaurants:
    get:
      description: Returns all restauarants in given location radius
      operationId: getRestaurants
      parameters:
        - description: longitude of center
          explode: true
          in: query
          name: longitude
          required: true
          schema:
            format: double
            type: number
          style: form
        - description: latitude of center
          explode: true
          in: query
          name: latitude
          required: true
          schema:
            format: double
            type: number
          style: form
        - description: radius
          explode: true
          in: query
          name: radius
          required: true
          schema:
            format: int64
            type: integer
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRestaurants'
          description: successful operation
        '400':
          description: Invalid query supplied
      summary: Find restaurants in user location given
      tags:
        - restaurants
  /restaurants/{restaurantId}/reviews:
    get:
      description: Returns all reviews for a single restaurant
      operationId: getReviewByRestaurant
      parameters:
        - description: ID of restaurant to return all reviews for a single restaurant
          explode: false
          in: path
          name: restaurantId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReviews'
          description: Successful operation
        '400':
          description: Invalid ID supplied
      summary: Find reviews by restaurant
      tags:
        - restaurants
  /users:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      summary: Create user
      tags:
        - users
  /users/login:
    post:
      description: ''
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/LoginUser'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginPayload'
          description: successful operation
        '400':
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
        - users
  /users/logout:
    post:
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '204':
          description: successful operation
      summary: Logs out current logged in user session
      tags:
        - users
  /users/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - description: Name of user that needs to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      summary: Delete user
      tags:
        - users
    get:
      description: ''
      operationId: getUserByName
      parameters:
        - description: 'The name that needs to be fetched. Use user1 for testing. '
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      summary: Get user by user name
      tags:
        - users
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - description: Name of user that need to be updated
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      responses:
        default:
          description: successful operation
      summary: Update user
      tags:
        - users
  /users/{username}/favoritefoods:
    put:
      description: This can only be done by the logged in user.
      operationId: updateFavoriteFoods
      parameters:
        - description: Name of user
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateFoods'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteFood'
          description: successful operation
        '400':
          description: Invalid username supplied
      summary: Update user's favorite foods
      tags:
        - users
  /users/{username}/reviews:
    get:
      description: Returns all reviews by a single user
      operationId: getReviewsByUsername
      parameters:
        - description: The name of user to return user's reviews
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReviews'
          description: successful operation
        '400':
          description: Invalid username supplied
      summary: Get reviews by user name
      tags:
        - users
components:
  requestBodies:
    CreateReview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateReview'
      description: Create a new review about a restaurant
      required: true
    UpdateReview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateReview'
      description: Update an existent review on a restaurant
      required: true
    CreateUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUser'
      description: Created user object
      required: true
    LoginUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginUser'
      description: Login information
      required: true
    UpdateUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUser'
      description: Update an existent user in the store
      required: true
    UpdateFoods:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FavoriteFood'
      description: Update user's list of favorite foods
      required: true
  schemas:
    Review:
      example:
        photoUrl: www.photouploaded.com
        rating: 5
        id: 10
        restaurantId: 19877
        userId: 198772
        content: Awesome
        favoriteFood: Pizza
        starred: true
      properties:
        id:
          example: 10
          format: int64
          title: id
          type: integer
        userId:
          example: 198772
          format: int64
          title: userId
          type: integer
        restaurantId:
          example: 19877
          format: int64
          title: restaurantId
          type: integer
        rating:
          example: 5
          format: int64
          title: rating
          type: integer
        content:
          example: Awesome
          title: content
          type: string
        photoUrl:
          example: www.photouploaded.com
          title: photoUrl
          type: string
        favoriteFood:
          example: pizza
          title: favoriteFood
          type: string
        starred:
          example: 1
          title: starred
          type: boolean
      required:
        - id
        - rating
        - restaurantId
        - userId
        - favoriteFood
        - starred
      title: Review
      type: object
    ListReviews:
      example:
        reviews:
          - photoUrl: www.photouploaded.com
            rating: 5
            id: 10
            restaurantId: 19877
            userId: 198772
            content: Awesome
            favoriteFood: Pizza
            starred: true
          - photoUrl: www.photouploaded.com
            rating: 5
            id: 10
            restaurantId: 19878
            userId: 198772
            content: Awesome
            favoriteFood: Pizza
            starred: false
      properties:
        reviews:
          items:
            $ref: '#/components/schemas/Review'
          title: reviews
          type: array
      required:
        - reviews
      title: ListReviews
      type: object
    CreateReview:
      example:
        photoUrl: www.photouploaded.com
        rating: 5
        id: 10
        restaurantId: 19877
        userId: 198772
        content: Awesome
        favoriteFood: Pizza
        starred: false
      properties:
        userId:
          example: 198772
          format: int64
          title: userId
          type: integer
        restaurantId:
          example: 19877
          format: int64
          title: restaurantId
          type: integer
        rating:
          example: 5
          format: int64
          title: rating
          type: integer
        content:
          example: Awesome
          title: content
          type: string
        photoUrl:
          example: www.photouploaded.com
          title: photoUrl
          type: string
        favoriteFood:
          example: pizza
          title: favoriteFood
          type: string
        starred:
          example: 1
          title: starred
          type: boolean
      required:
        - rating
        - restaurantId
        - userId
        - favoriteFood
        - starred
      title: CreateReview
      type: object
    UpdateReview:
      example:
        photoUrl: www.photouploaded.com
        rating: 5
        content: Awesome
        starred: true
      properties:
        rating:
          example: 5
          format: int64
          title: rating
          type: integer
        content:
          example: Awesome
          title: content
          type: string
        photoUrl:
          example: www.photouploaded.com
          title: photoUrl
          type: string
        favoriteFood:
          example: pizza
          title: favoriteFood
          type: string
        starred:
          example: 1
          title: starred
          type: boolean
      title: UpdateReview
      type: object
    User:
      example:
        firstName: John
        lastName: James
        password: '12345'
        id: 10
        email: john@email.com
        friends:
          - null
          - null
        username: theUser
        favoriteFoods:
          name: sushi
          order: 10
      properties:
        id:
          example: 10
          format: int64
          title: id
          type: integer
        username:
          example: theUser
          title: username
          type: string
        firstName:
          example: John
          title: firstName
          type: string
        lastName:
          example: James
          title: lastName
          type: string
        email:
          example: john@email.com
          title: email
          type: string
        password:
          example: '12345'
          title: password
          type: string
        favoriteFoods:
          items:
            $ref: '#/components/schemas/FavoriteFood'
          title: favoriteFoods
          type: array
        friends:
          items:
            $ref: '#/components/schemas/User'
          title: friends
          type: array
      required:
        - email
        - favoriteFoods
        - firstName
        - friends
        - id
        - lastName
        - password
        - username
      title: User
      type: object
    CreateUser:
      example:
        firstName: John
        lastName: James
        password: '12345'
        email: john@email.com
        username: theUser
      properties:
        username:
          example: theUser
          title: username
          type: string
        firstName:
          example: John
          title: firstName
          type: string
        lastName:
          example: James
          title: lastName
          type: string
        email:
          example: john@email.com
          title: email
          type: string
        password:
          example: '12345'
          title: password
          type: string
      required:
        - email
        - firstName
        - lastName
        - password
        - username
      title: CreateUser
      type: object
    UpdateUser:
      example:
        firstName: John
        lastName: James
        password: '12345'
        email: john@email.com
        friends:
          - firstName: John
            lastName: James
            password: '12345'
            id: 10
            email: john@email.com
            friends:
              - null
              - null
            username: theUser
            favoriteFoods:
              name: sushi
              order: 10
          - firstName: John
            lastName: James
            password: '12345'
            id: 10
            email: john@email.com
            friends:
              - null
              - null
            username: theUser
            favoriteFoods:
              name: sushi
              order: 10
        username: theUser
        favoriteFoods:
          name: sushi
          order: 10
      properties:
        username:
          example: theUser
          title: username
          type: string
        firstName:
          example: John
          title: firstName
          type: string
        lastName:
          example: James
          title: lastName
          type: string
        email:
          example: john@email.com
          title: email
          type: string
        password:
          example: '12345'
          title: password
          type: string
        favoriteFoods:
          items:
            $ref: '#/components/schemas/FavoriteFood'
          title: favoriteFoods
          type: array
        friends:
          items:
            $ref: '#/components/schemas/User'
          title: friends
          type: array
      title: UpdateUser
      type: object
    LoginUser:
      example:
        password: '12345'
        email: john@email.com
      properties:
        email:
          example: john@email.com
          title: email
          type: string
        password:
          example: '12345'
          title: password
          type: string
      required:
        - email
        - password
      title: LoginUser
      type: object
    LoginPayload:
      example:
        token: XXXXXXXX
        username: theUser
      properties:
        token:
          example: XXXXXXXX
          title: token
          type: string
        username:
          example: theUser
          title: username
          type: string
      required:
        - token
        - username
      title: LoginPayload
      type: object
    Restaurant:
      example:
        address: '120 Detroit Ave, CA 94520'
        latitude: 49.2
        name: Outback
        id: 10
        longitude: 32.6
      properties:
        id:
          example: 10
          format: int64
          title: id
          type: integer
        name:
          example: Outback
          title: name
          type: string
        longitude:
          example: 32.6
          format: double
          title: longitude
          type: number
        latitude:
          example: 49.2
          format: double
          title: latitude
          type: number
        address:
          example: '120 Detroit Ave, CA 94520'
          title: address
          type: string
      required:
        - address
        - id
        - latitude
        - longitude
        - name
      title: Restaurant
      type: object
    ListRestaurants:
      example:
        restaurants:
          - address: '120 Detroit Ave, CA 94520'
            latitude: 49.2
            name: Outback
            id: 10
            longitude: 32.6
          - address: '120 Detroit Ave, CA 94520'
            latitude: 49.2
            name: Outback
            id: 10
            longitude: 32.6
      properties:
        restaurants:
          items:
            $ref: '#/components/schemas/Restaurant'
          title: restaurants
          type: array
      required:
        - restaurants
      title: ListRestaurants
      type: object
    FavoriteFood:
      example:
        name: sushi
        id: 10
      properties:
        id:
          example: 10
          format: int64
          title: id
          type: integer
        name:
          example: sushi
          title: name
          type: string
      required:
        - id
        - name
      title: FavoriteFood
      type: object
    ApiResponse:
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          title: code
          type: integer
        type:
          title: type
          type: string
        message:
          title: message
          type: string
      title: ApiResponse
      type: object

/* tslint:disable */
/* eslint-disable */
/**
 * Flavorite - OpenAPI 3.0
 * This is a Flavorite Server based on the OpenAPI 3.0 specification. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateReview,
    CreateReviewFromJSON,
    CreateReviewToJSON,
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    Review,
    ReviewFromJSON,
    ReviewToJSON,
    UpdateReview,
    UpdateReviewFromJSON,
    UpdateReviewToJSON,
} from '../models';

export interface AddReviewRequest {
    createReview: CreateReview;
}

export interface DeleteImageRequest {
    reviewId: number;
}

export interface DeleteReviewRequest {
    reviewId: number;
}

export interface GetReviewByIdRequest {
    reviewId: number;
}

export interface UpdateReviewbyIdRequest {
    reviewId: number;
    updateReview: UpdateReview;
}

export interface UploadImageRequest {
    reviewId: number;
    additionalMetadata?: string;
    body?: Blob;
}

/**
 * 
 */
export class ReviewsApi extends runtime.BaseAPI {

    /**
     * Add a new review about a restaurant
     * Add a new review about a restaurant
     */
    async addReviewRaw(requestParameters: AddReviewRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.createReview === null || requestParameters.createReview === undefined) {
            throw new runtime.RequiredError('createReview','Required parameter requestParameters.createReview was null or undefined when calling addReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewToJSON(requestParameters.createReview),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Add a new review about a restaurant
     * Add a new review about a restaurant
     */
    async addReview(requestParameters: AddReviewRequest): Promise<Review> {
        const response = await this.addReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * deletes an image
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling deleteImage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/{reviewId}/image`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes an image
     */
    async deleteImage(requestParameters: DeleteImageRequest): Promise<void> {
        await this.deleteImageRaw(requestParameters);
    }

    /**
     * delete a review
     * Deletes a review
     */
    async deleteReviewRaw(requestParameters: DeleteReviewRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling deleteReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete a review
     * Deletes a review
     */
    async deleteReview(requestParameters: DeleteReviewRequest): Promise<void> {
        await this.deleteReviewRaw(requestParameters);
    }

    /**
     * Returns a single review
     * Find review by ID
     */
    async getReviewByIdRaw(requestParameters: GetReviewByIdRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling getReviewById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Returns a single review
     * Find review by ID
     */
    async getReviewById(requestParameters: GetReviewByIdRequest): Promise<Review> {
        const response = await this.getReviewByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing review by Id
     * Update an existing review
     */
    async updateReviewbyIdRaw(requestParameters: UpdateReviewbyIdRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling updateReviewbyId.');
        }

        if (requestParameters.updateReview === null || requestParameters.updateReview === undefined) {
            throw new runtime.RequiredError('updateReview','Required parameter requestParameters.updateReview was null or undefined when calling updateReviewbyId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReviewToJSON(requestParameters.updateReview),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Update an existing review by Id
     * Update an existing review
     */
    async updateReviewbyId(requestParameters: UpdateReviewbyIdRequest): Promise<Review> {
        const response = await this.updateReviewbyIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * uploads an image
     */
    async uploadImageRaw(requestParameters: UploadImageRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling uploadImage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.additionalMetadata !== undefined) {
            queryParameters['additionalMetadata'] = requestParameters.additionalMetadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        const response = await this.request({
            path: `/reviews/{reviewId}/image`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * uploads an image
     */
    async uploadImage(requestParameters: UploadImageRequest): Promise<ModelApiResponse> {
        const response = await this.uploadImageRaw(requestParameters);
        return await response.value();
    }

}

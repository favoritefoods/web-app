/* tslint:disable */
/* eslint-disable */
/**
 * Flavorite - OpenAPI 3.0
 * This is a Flavorite Server based on the OpenAPI 3.0 specification. 
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    Review,
    ReviewFromJSON,
    ReviewToJSON,
} from '../models';

export interface AddReviewRequest {
    review: Review;
}

export interface DeleteReviewRequest {
    reviewId: number;
    apiKey?: string;
}

export interface GetReviewByIdRequest {
    reviewId: number;
}

export interface GetReviewByRestaurantRequest {
    restaurantId: number;
}

export interface GetReviewByUserRequest {
    userId: number;
}

export interface UpdateReviewRequest {
    review: Review;
}

export interface UploadFileRequest {
    reviewId: number;
    additionalMetadata?: string;
    body?: Blob;
}

/**
 * 
 */
export class ReviewApi extends runtime.BaseAPI {

    /**
     * Add a new review about a restaurant
     * Add a new review about a restaurant
     */
    async addReviewRaw(requestParameters: AddReviewRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.review === null || requestParameters.review === undefined) {
            throw new runtime.RequiredError('review','Required parameter requestParameters.review was null or undefined when calling addReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("flavorite_auth", ["write:reviews", "read:reviews"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewToJSON(requestParameters.review),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Add a new review about a restaurant
     * Add a new review about a restaurant
     */
    async addReview(requestParameters: AddReviewRequest): Promise<Review> {
        const response = await this.addReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a review
     * Deletes a review
     */
    async deleteReviewRaw(requestParameters: DeleteReviewRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling deleteReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiKey !== undefined && requestParameters.apiKey !== null) {
            headerParameters['api_key'] = String(requestParameters.apiKey);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("flavorite_auth", ["write:reviews", "read:reviews"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/review/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete a review
     * Deletes a review
     */
    async deleteReview(requestParameters: DeleteReviewRequest): Promise<void> {
        await this.deleteReviewRaw(requestParameters);
    }

    /**
     * Returns a single review
     * Find review by ID
     */
    async getReviewByIdRaw(requestParameters: GetReviewByIdRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling getReviewById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("flavorite_auth", ["write:reviews", "read:reviews"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/review/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Returns a single review
     * Find review by ID
     */
    async getReviewById(requestParameters: GetReviewByIdRequest): Promise<Review> {
        const response = await this.getReviewByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all reviews for a single restaurant
     * Find reviews by restaurant
     */
    async getReviewByRestaurantRaw(requestParameters: GetReviewByRestaurantRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.restaurantId === null || requestParameters.restaurantId === undefined) {
            throw new runtime.RequiredError('restaurantId','Required parameter requestParameters.restaurantId was null or undefined when calling getReviewByRestaurant.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("flavorite_auth", ["write:reviews", "read:reviews"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/review/{restaurantId}`.replace(`{${"restaurantId"}}`, encodeURIComponent(String(requestParameters.restaurantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Returns all reviews for a single restaurant
     * Find reviews by restaurant
     */
    async getReviewByRestaurant(requestParameters: GetReviewByRestaurantRequest): Promise<Review> {
        const response = await this.getReviewByRestaurantRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all reviews by a single user
     * Find reviews by user
     */
    async getReviewByUserRaw(requestParameters: GetReviewByUserRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getReviewByUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("flavorite_auth", ["write:reviews", "read:reviews"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/review/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Returns all reviews by a single user
     * Find reviews by user
     */
    async getReviewByUser(requestParameters: GetReviewByUserRequest): Promise<Review> {
        const response = await this.getReviewByUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing review by Id
     * Update an existing review
     */
    async updateReviewRaw(requestParameters: UpdateReviewRequest): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters.review === null || requestParameters.review === undefined) {
            throw new runtime.RequiredError('review','Required parameter requestParameters.review was null or undefined when calling updateReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("flavorite_auth", ["write:reviews", "read:reviews"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/review`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewToJSON(requestParameters.review),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     * Update an existing review by Id
     * Update an existing review
     */
    async updateReview(requestParameters: UpdateReviewRequest): Promise<Review> {
        const response = await this.updateReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * uploads an image
     */
    async uploadFileRaw(requestParameters: UploadFileRequest): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling uploadFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.additionalMetadata !== undefined) {
            queryParameters['additionalMetadata'] = requestParameters.additionalMetadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("flavorite_auth", ["write:reviews", "read:reviews"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/review/{reviewId}/uploadImage`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * uploads an image
     */
    async uploadFile(requestParameters: UploadFileRequest): Promise<ModelApiResponse> {
        const response = await this.uploadFileRaw(requestParameters);
        return await response.value();
    }

}
